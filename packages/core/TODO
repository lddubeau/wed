Search and Replace
==================

- Fix the issue with scopes. There's a bug in rangy that happens if the start
  position, for instance, is at the very end of the scope. In this case, Rangy
  findText will return a hit outside the scope!

- Support JavaScript regular expressions.

- Ideally, scope:

 - If nothing selected, whole document.

 - If label clicked, only element.

 - If text selection, only text.

- Introduce a new undo object which has a "breakable" field. A search/replace
  will turn "breakable" on. If the user undoes an undo object with "breakable"
  turned on, then ask whether it should be done atomically or broken into
  individual search/replace.

Wed Itself
==========

Store the Caret as a (Path, Offset) Pair
----------------------------------------

Up to now, wed has maintained its carets as a (Node, offset)
pair. This has worked fairly well but the changes that have been made
to support attribute editing have complicated things. In particular
the decorator must save the caret before decorating an element and
refresh it afterwards. This refreshing could be avoided by storing the
caret's node as a path. This could potentially also simplify other
cases.

Caret Paths
-----------

Caret paths currently cannot be used to note a caret position which is
inside a label (but outside an attribute value). This means that when
a transformation is initiated from a label and then undone, the
caret will **NOT** be back in the label.

[This is a problem which has been present in wed since the start but
 has been thrown into focus with the addition of attribute support.]

Input Triggers
--------------

At the moment input triggers are applied whenever the keys that
trigger them are used in any of the child of the selector passed to
the InputTrigger. This may not always be desirable.

Listeners
---------

There should be a listener on the gui_tree and a listener on the data
tree. This way event handlers that care only about changes to the data
tree can listen only to that and not have to filter out the gui
stuff. This would require a change to what is given to modes because
right now they only get a gui listener.

TreeUpdater
-----------

* Currently, TreeUpdater is designed so that the number of primitives
  is minimal. This has for effect that setTextNodeValue is used for
  inserting and deleting text. setTextNodeValue uses ``node.data =``
  to set the text, which is slower than using ``deleteData`` or
  ``insertData``. We should explore expanding the primitives so that
  these better performing methods can be used instead of doing
  ``node.data =``.

Saving Protocol
---------------

* The procotol could be redesigned to use HTTP error codes for error
   conditions.

Other
-----

* Investigate web workers to replace timeouts as the main parallelism
  mechanism for running validation in the background.
