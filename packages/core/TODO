CONTINUE
========

There is a bug in salve which prevents it from processing "doc-unannotated.rng".

Do Ligeia's requests from emails titled MMWP tweaks.

Create proper documentation for the MMWP mode. Among the missing things there is
currently no explanation of how to split compounds.

You had split off the savers from the main code. You still need to clean up
core's code and dependencies to make sure every unnededed bit is removed. Also
go over the build code to check for things that can be removed.

IMPORTANT
=========

There's also a bug whereby `npm publish` needs to be in the same directory as
the bundle to be published. :-/

Other issues brought up by scholarly team Oct 2018
==================================================

- Reword the description of XML operations. Clarify that "Deleting. Such
  operations are usually marked with the delete symbol. These are operations
  that remove whole elements or attributes from the document. They normally do
  not operate on selections." means only that delete oprations won't show up in
  menus when a selection is in effect.

- Doing Ctrl-Delete, or Cmd-Delete, or any combination Delete or Backspace skips
  wed and is handled by the browser, with disastrous results.

- Remove the check that is done when pasting to check that the pasted data is
  valid XML. Just paste it and let the errors come up. This allows users to edit
  files that are not yet valid: if the user want to copy-paste a region with
  errors they currently cannot do it due to the check.

Fix documentation
=================

* The Reflection Metadata API must be fully available use `reflection-metadata`.

* Must create a container and define necessary bits.

* We no longer use RequireJS in development but SystemJS. Wed still needs an AMD
  loader and must have ``define`` and ``require`` accessible. (Can be set from
  SystemJS.)

* ``wed/onerror`` and ``wed/log`` are no longer meant to be loaded individually.

  The ``onerror`` module is available as the ``onerror`` field exposed by the
  ``wed`` module.

  The old approach had the advantage that one could load ``wed/onerror`` to trap
  errors early, like errors that occur while wed loads. The problem though is
  that the capability to load ``wed/onerror`` as and individual module
  complicates the build, and makes it a bit awkward. Going forward,
  ``wed/onerror`` will be only meant to be used to trap errors happening when
  wed is already loaded. Wed clients desirous to trap early errors will have to
  use another method to do so.

* The recommended way to make a custom build of wed is to create an entry module
  which refers to the required packages and do a webpack build of that.

* Be careful not to load any module twice.

* The localForage saver has been removed.

* IndexedDBSaver is now DBSaver.

Search and Replace
==================

- Fix the issue with scopes. There's a bug in rangy that happens if the start
  position, for instance, is at the very end of the scope. In this case, Rangy
  findText will return a hit outside the scope!

- Support JavaScript regular expressions.

- Ideally, scope:

 - If nothing selected, whole document.

 - If label clicked, only element.

 - If text selection, only text.

- Introduce a new undo object which has a "breakable" field. A search/replace
  will turn "breakable" on. If the user undoes an undo object with "breakable"
  turned on, then ask whether it should be done atomically or broken into
  individual search/replace.

Misc
====

- util.stackTrace should be updated to take advantage of
   console.trace.

Wed Itself
==========

Store the Caret as a (Path, Offset) Pair
----------------------------------------

Up to now, wed has maintained its carets as a (Node, offset)
pair. This has worked fairly well but the changes that have been made
to support attribute editing have complicated things. In particular
the decorator must save the caret before decorating an element and
refresh it afterwards. This refreshing could be avoided by storing the
caret's node as a path. This could potentially also simplify other
cases.

Caret Paths
-----------

Caret paths currently cannot be used to note a caret position which is
inside a label (but outside an attribute value). This means that when
a transformation is initiated from a label and then undone, the
caret will **NOT** be back in the label.

[This is a problem which has been present in wed since the start but
 has been thrown into focus with the addition of attribute support.]

Input Triggers
--------------

At the moment input triggers are applied whenever the keys that
trigger them are used in any of the child of the selector passed to
the InputTrigger. This may not always be desirable.

Listeners
---------

There should be a listener on the gui_tree and a listener on the data
tree. This way event handlers that care only about changes to the data
tree can listen only to that and not have to filter out the gui
stuff. This would require a change to what is given to modes because
right now they only get a gui listener.

TreeUpdater
-----------

* Currently, TreeUpdater is designed so that the number of primitives
  is minimal. This has for effect that setTextNodeValue is used for
  inserting and deleting text. setTextNodeValue uses ``node.data =``
  to set the text, which is slower than using ``deleteData`` or
  ``insertData``. We should explore expanding the primitives so that
  these better performing methods can be used instead of doing
  ``node.data =``.

Saving Protocol
---------------

* The procotol could be redesigned to use HTTP error codes for error
   conditions.

Other
-----

* Investigate web workers to replace timeouts as the main parallelism
  mechanism for running validation in the background.
