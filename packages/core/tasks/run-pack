#!/usr/bin/env node

"use strict";

const path = require("path");

const { cprpdir, cprp, del, exec, execFile, fs } = require("./util");

process.on("unhandledRejection", (err) => {
  // eslint-disable-next-line no-console
  console.log(err);
  process.exit(1);
});

const LATEST_DIST = "./build/LATEST-DIST.tgz";
async function run() {
  await del("build/wed-*.tgz");
  const dist = "build/dist";
  await fs.emptyDir(dist);
  await cprpdir(["build/dist/dev", "build/dist/packed", "build/bin", "package.json",
                 "npm-shrinkwrap.json"], dist);
  await fs.writeFile(path.join(dist, ".npmignore"), `\
*
!dist/dev/**
!dist/bin/**
!dist/packed/**
dist/dev/lib/tests/**
`);
  await exec(`sed -e'/"private": true/d' package.json > ${dist}/package.json`);
  await cprp("README.md", `${dist}/README.md`);
  const { stdout } = await execFile("npm", ["pack"],
                                    { cwd: dist, maxBuffer: 500 * 1024 });
  const packname = stdout.trim();
  const buildPack = `build/${packname}`;
  await fs.rename(`${dist}/${packname}`, buildPack);
  await del(LATEST_DIST);
  await fs.symlink(packname, LATEST_DIST);
  //
  // It is currently not possible to do an install test.
  //
  // const tempPath = "build/t";
  // await del(tempPath);
  // await mkdirp(`${tempPath}/node_modules`);
  // await spawn("npm", ["install", `../${packname}`], { cwd: tempPath });
  // await del(tempPath);
}

run();
