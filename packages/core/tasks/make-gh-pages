#!/usr/bin/env node

"use strict";

const { del, cprp, checkOutputFile, exec, fs, mkdirp, cprpdir } =
      require("../gulptasks/util");

process.on("unhandledRejection", (err) => {
  // eslint-disable-next-line no-console
  console.log(err);
  process.exit(1);
});

async function check() {
  let [out] = await checkOutputFile("git",
                                    ["rev-parse", "--abbrev-ref", "HEAD"]);
  out = out.trim();
  if (out !== "master" && !process.env.npm_config_force_gh_pages_build) {
    throw new Error(`***
Not on master branch. Don't build gh-pages-build on
a branch other than master.
***`);
  }

  if (!process.env.npm_config_unsafe_deployment) {
    // We use this only for the side effect it has:
    // it fails of the current working directory is
    // unclean.
    await exec("node ./tasks/generate_build_info.js > /dev/null");
  }
}

async function ghPages() {
  await check();
  const dest = "gh-pages";
  const merged = "build/merged-gh-pages";
  await fs.emptyDir(dest);
  await del(merged);
  await cprp("doc", merged);

  // Yep we invoke make on the documentation.
  await exec(`make -C ${merged} html`);

  await exec(`cp -rp ${merged}/_build/html/* build/api ${dest}`);

  const destBuild = `${dest}/build`;
  await mkdirp(destBuild);
  await cprpdir(["build/samples", "build/schemas", "build/standalone",
                 "build/packed"], destBuild);

  await Promise.all(["standalone", "packed"].map(async (tree) => {
    const globalConfig = `${dest}/build/${tree}/lib/global-config.js`;
    await fs.move(globalConfig, `${globalConfig}.t`);
    await exec("node tasks/modify_config.js -d config.ajaxlog -d config.save " +
               `${globalConfig}.t > ${globalConfig}`);
  }));

  await cprpdir("build/standalone/lib/tests/wed_test_data/unit_selection.xml",
                `${dest}/tutorial_data`);
}

ghPages();
